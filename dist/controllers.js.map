{"version":3,"sources":["../controllers.js"],"names":["req","res","body","console","log","emailAddress","firstName","lastName","phoneNumber","loginId","password","konnektive_password","campaignId","options","method","uri","qs","json","then","response","result","message","logger","crit","status","send","error","referrer","orderId","catch","err","createLead","address1","address2","cardMonth","cardNumber","replace","cardYear","city","postalCode","productId","state","country","billShipSame","paySource","product1_qty","productQty","product1_id","cardSecurityCode","createOrder","updateOrder","debug","id","params","getOrder","token","module","exports"],"mappings":"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","file":"controllers.js","sourcesContent":["/**\r\n * Created by austin on 7/17/2017.\r\n */\r\n\r\n// TODO handle promise rejection\r\n\r\nimport xss from 'xss';\r\nimport request from 'request-promise';\r\nimport config from './config.json';\r\nimport Logger from 'le_node';\r\n\r\nlet body = {};\r\nconst campaignId = 3; // Defined in Konnektive\r\nconst country = 'US';\r\nconst billShipSame = 1;\r\nconst paySource = 'CREDITCARD';\r\n\r\n// Logging through LogEntries\r\nconst logger = new Logger({\r\n    token: 'a1021c70-b3fe-4f55-8ed8-4e703a13665e'\r\n});\r\n\r\n/**\r\n * Creates Leads in Konnektive\r\n * @param req\r\n * @param res\r\n * @returns {Promise.<void>}\r\n */\r\nasync function createLead(req, res)\r\n{\r\n    body = {};\r\n    console.log('Received POST /lead');\r\n\r\n    body.emailAddress = xss(req.body.emailAddress);\r\n    body.firstName = xss(req.body.firstName);\r\n    body.lastName = xss(req.body.lastName);\r\n    body.phoneNumber = xss(req.body.phoneNumber);\r\n    body.loginId = 'konnektive_api_user';\r\n    body.password = config.konnektive_password;\r\n    body.campaignId = campaignId;\r\n\r\n    const options = {\r\n        method: 'POST',\r\n        uri: 'https://api.konnektive.com/leads/import/',\r\n        qs: body,\r\n        json: true, // Automatically parses the JSON string in the response\r\n    };\r\n\r\n    return request(options)\r\n        .then((response) => {\r\n            // Respond with error from Konnektive\r\n            if (response.result === 'ERROR') {\r\n                console.log('error', response.message);\r\n                logger.crit('KONNEKTIVE ERROR ' + response.message);\r\n                res.status(200).send({ error: response.message, referrer: 'KONNEKTIVE' });\r\n            }\r\n            else {\r\n                // Send Konnektive response and OrderId back to user\r\n                res.status(200).send({\r\n                    message: response.result,\r\n                    orderId: response.message.orderId,\r\n                })\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log('error', err.message);\r\n            logger.crit('ERROR ' + err.message);\r\n            res.status(500).send({ error: err.message, referrer: 'TM'});\r\n        });\r\n}\r\n\r\n// TODO store orderId\r\nasync function createOrder(req, res)\r\n{\r\n    console.log('Received POST /order');\r\n\r\n    body = {};\r\n    body.address1 = xss(req.body.address1);\r\n    body.address2 = xss(req.body.address2);\r\n    body.cardMonth = xss(req.body.cardMonth);\r\n    body.cardNumber = xss(req.body.cardNumber).replace(/\\s/g, '');\r\n    body.cardYear = xss(req.body.cardYear);\r\n    body.city = xss(req.body.city);\r\n    body.emailAddress = xss(req.body.emailAddress);\r\n    body.firstName = xss(req.body.firstName);\r\n    body.lastName = xss(req.body.lastName);\r\n    body.orderId = xss(req.body.orderId);\r\n    body.phoneNumber = xss(req.body.phoneNumber);\r\n    body.postalCode = xss(req.body.postalCode);\r\n    body.productId = xss(req.body.productId);\r\n    body.state = xss(req.body.state);\r\n    body.country = country;\r\n    body.billShipSame = billShipSame;\r\n    body.campaignId = campaignId;\r\n    body.paySource = paySource;\r\n    body.product1_qty = req.body.productQty;\r\n    body.product1_id = req.body.productId;\r\n    body.loginId = 'konnektive_api_user';\r\n    body.password = config.konnektive_password;\r\n\r\n    // Enable test cards\r\n    if(body.cardNumber === '0000000000000000')\r\n    {\r\n        body.cardSecurityCode = '100';\r\n    }\r\n\r\n    const options = {\r\n        method: 'POST',\r\n        uri: 'https://api.konnektive.com/order/import/',\r\n        qs: body,\r\n        json: true, // Automatically parses the JSON string in the response\r\n    };\r\n\r\n    return request(options)\r\n        .then((response) => {\r\n            // Respond with error from Konnektive\r\n            if (response.result === 'ERROR') {\r\n                console.log('error', response.message);\r\n                logger.crit('KONNEKTIVE ERROR ' + response.message);\r\n                res.status(200).send({ error: response.message, referrer: 'KONNEKTIVE'});\r\n            }\r\n            else {\r\n                // Send Konnektive response and OrderId back to user\r\n                res.status(200).send({\r\n                    message: response.result,\r\n                    orderId: response.message.orderId,\r\n                })\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log('error', err.message);\r\n            logger.crit('ERROR ' + err.message);\r\n            res.status(500).send({ error: err.message, referrer: 'TM'});\r\n        });\r\n}\r\n\r\nasync function updateOrder(req, res)\r\n{\r\n    console.log('Received PUT /order');\r\n    body = {};\r\n    body.productId = xss(req.body.productId);\r\n    body.productQty = xss(req.body.productQty);\r\n    body.orderId = req.body.orderId; // TODO pull orderId\r\n\r\n    body.loginId = 'konnektive_api_user';\r\n    body.password = config.konnektive_password;\r\n\r\n    const options = {\r\n        method: 'POST',\r\n        uri: 'https://api.konnektive.com/upsale/import/',\r\n        qs: body,\r\n        json: true, // Automatically parses the JSON string in the response\r\n    };\r\n\r\n    return request(options)\r\n        .then((response) => {\r\n            // Respond with error from Konnektive\r\n            if (response.result === 'ERROR') {\r\n                console.log('error', response.message);\r\n                logger.crit('KONNEKTIVE ERROR ' + response.message);\r\n                res.status(200).send({ error: response.message, referrer: 'KONNEKTIVE'});\r\n            }\r\n            else {\r\n                // Send Konnektive response and OrderId back to user\r\n                res.status(200).send({\r\n                    message: response.result,\r\n                    orderId: response.message.orderId,\r\n                })\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log('error', err.message);\r\n            logger.crit('ERROR ' + err.message);\r\n            res.status(500).send({ error: err.message, referrer: 'TM'});\r\n        });\r\n}\r\n\r\nasync function getOrder(req, res)\r\n{\r\n    logger.debug('GET /order received');\r\n    body = {};\r\n\r\n    const id = req.params.id;\r\n\r\n    if (!id) {\r\n        return res.error('Order ID not found');\r\n    }\r\n    const options = {\r\n        method: 'GET',\r\n        uri: 'https://api.konnektive.com/order/query/',\r\n        qs: {\r\n            loginId: 'konnektive_api_user',\r\n            password: config.konnektive_password,\r\n            orderId: id,\r\n        },\r\n        json: true, // Automatically parses the JSON string in the response\r\n    };\r\n    return request(options)\r\n        .then((response) => {\r\n            // Respond with error from Konnektive\r\n            if (response.result === 'ERROR') {\r\n                console.log('error', response.message);\r\n                logger.crit('KONNEKTIVE ERROR ' + response.message);\r\n                res.status(200).send({ error: response.message, referrer: 'KONNEKTIVE'});\r\n            }\r\n            else {\r\n                // Send Konnektive response and OrderId back to user\r\n                res.status(200).send({\r\n                    message: response.message,\r\n                    orderId: response.message.orderId,\r\n                })\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log('error', err.message);\r\n            logger.crit('ERROR ' + err.message);\r\n            res.status(500).send({ error: err.message, referrer: 'TM'});\r\n        });\r\n}\r\n\r\nmodule.exports = {\r\n    createLead,\r\n    createOrder,\r\n    updateOrder,\r\n    getOrder\r\n};\r\n"]}