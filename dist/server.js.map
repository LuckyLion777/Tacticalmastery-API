{"version":3,"sources":["../server.js"],"names":["listeners","app","port","process","env","PORT","jwtCheck","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","audience","issuer","algorithms","use","logger","token","err","req","res","next","name","path","status","json","message","send","konnektive_api_user","konnektive_password","campaignId","country","billShipSame","paySource","product1_qty","guard","permissions","i","length","user","scope","includes","debug","request","headers","urlencoded","extended","server","listen","info","console","log","module","exports","get","post","createLead","createOrder","put","updateOrder","getOrder"],"mappings":"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","file":"server.js","sourcesContent":["/**\r\n * Created by Austin Jones on 7/5/2017.\r\n */\r\nimport 'babel-polyfill'; // Required for transpiling ES6\r\nimport jwks from 'jwks-rsa';\r\nimport jwt from 'express-jwt';\r\nimport express from 'express';\r\nimport Logger from 'le_node';\r\nimport bodyParser from 'body-parser';\r\nimport * as listeners from './controllers';\r\nimport config from './config.json';\r\n\r\nconst app = express();\r\n\r\nconst port = process.env.PORT || 3000;\r\n\r\nconst jwtCheck = jwt({\r\n    secret: jwks.expressJwtSecret({\r\n        cache: true,\r\n        rateLimit: true,\r\n        jwksRequestsPerMinute: 5,\r\n        jwksUri: \"https://starlightgroup.auth0.com/.well-known/jwks.json\"\r\n    }),\r\n    audience: 'https://api.tacticalmastery.com',\r\n    issuer: \"https://starlightgroup.auth0.com/\",\r\n    algorithms: ['RS256']\r\n});\r\n\r\n// Enable the use of the jwtCheck middleware in all of our routes\r\napp.use(jwtCheck);\r\n\r\n// Logging through LogEntries\r\nconst logger = new Logger({\r\n    token: 'a1021c70-b3fe-4f55-8ed8-4e703a13665e'\r\n});\r\n\r\n// If we do not get the correct credentials, weâ€™ll return an appropriate message\r\napp.use(function (err, req, res, next) {\r\n    if (err.name === 'UnauthorizedError' && req.path !== '/health') {\r\n        logger.err(\"Invalid API token received\");\r\n        res.status(401).json({ message: 'Missing or invalid token' });\r\n    }\r\n    // Return 200 if health check\r\n    else if(err.name === 'UnauthorizedError' && req.path === '/health') {\r\n        res.status(200).send();\r\n    }\r\n});\r\n\r\n// Konnektive API credentials\r\nconst konnektive_api_user = 'konnektive_api_user';\r\nconst konnektive_password = config.konnektive_password;\r\nconst campaignId = 3;\r\nconst country = 'US';\r\nconst billShipSame = 1;\r\nconst paySource = 'CREDITCARD';\r\nconst product1_qty = 1;\r\n\r\nconst guard = (req, res, next) => {\r\n    if(req.path === '/health') {\r\n        res.status(200).send();\r\n        next();\r\n    }\r\n    const permissions = ['frontend'];\r\n    for (let i = 0; i < permissions.length; i++) {\r\n        if (req.user.scope.includes(permissions[i])) {\r\n            next();\r\n        } else {\r\n            logger.debug('Forbidden request received from ' + request.headers['x-forwarded-for']);\r\n            res.status(403).send({message: 'Forbidden'});\r\n        }\r\n    }\r\n};\r\n\r\napp.use(guard);\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\nconst server = app.listen(port, \"0.0.0.0\", () => {\r\n    logger.info('Server started on port ' + port);\r\n    console.log('API listening on port ' + port);\r\n});\r\n\r\nmodule.exports = {\r\n    campaignId,\r\n    country,\r\n    billShipSame,\r\n    paySource,\r\n    product1_qty,\r\n    konnektive_api_user,\r\n    konnektive_password,\r\n    app,\r\n};\r\n\r\n// Return health check for AWS\r\napp.get('/health', () => {\r\n    // do nothing, status already sent\r\n});\r\n\r\n// Create lead\r\napp.post('/lead', listeners.createLead);\r\n\r\n// Create order\r\napp.post('/order', listeners.createOrder);\r\n\r\n// Update order (upsell)\r\napp.put('/order', listeners.updateOrder);\r\n\r\n// Get order data\r\napp.get('/order/:id', listeners.getOrder);"]}